 #region for vowel
            string findvowel = "vowel";
            int charlength = findvowel.Length;
            char[] charArray = new char[charlength];
            charArray = findvowel.ToCharArray();

            int vowelCount = 0;
            for (int i = 0; i < charArray.Length; i++)
            {
                Console.WriteLine(charArray[i]);
                if (charArray[i]=='a' || charArray[i] == 'e' || charArray[i] == 'i' || charArray[i] == 'o' || charArray[i] == 'u' || charArray[i] == 'A' || charArray[i] == 'E' || charArray[i] == 'I' || charArray[i] == 'O' || charArray[i] == 'U')
                {
                    vowelCount+=1;
                }
            }

            Console.WriteLine(vowelCount);

            #endregion




   string binarynumber = "10101";
            int charlength = binarynumber.Length;
            char[] charArray = new char[charlength];
            charArray = binarynumber.ToCharArray();

            double decimalvalue = 0;
            for (int i = 0; i < charArray.Length; i++)
            {
                if (charArray[i] == '1')
                {
                    decimalvalue += Math.Pow(2, charArray.Length - i - 1);
                }
            }

            Console.WriteLine(decimalvalue);






#region subtract two numbers
            string firstNumber = "987654321";
            string secondNumber = "123456789";
            string result = string.Empty;
            if (Convert.ToInt64(firstNumber)>Convert.ToInt64(secondNumber))
            {
                for (int i = 0; i < firstNumber.Length; i++)
                {
                    if (secondNumber[secondNumber.Length - 1 - i]> firstNumber[firstNumber.Length - 1 - i])
                    {
                        //Convert.ToInt64(firstNumber[firstNumber.Length - 1 - i]) = Convert.ToInt64(firstNumber[firstNumber.Length - 1 - i]) + 10;
                        result= Convert.ToString(firstNumber[firstNumber.Length - 1 - i]+10 - secondNumber[secondNumber.Length - 1 - i]);
                        string replacement = Convert.ToString(secondNumber[secondNumber.Length - 2 - i]);
                        replacement = Convert.ToString(Convert.ToInt32(replacement) + 1);
                        int index = secondNumber.IndexOf(secondNumber[secondNumber.Length - 1 - i-1]);
                        secondNumber = secondNumber.Remove(index, 1).Insert(index, replacement.ToString());
                    }
                    else
                    {
                        result = Convert.ToString(firstNumber[firstNumber.Length - 1 - i] - secondNumber[secondNumber.Length - 1 - i]);

                    }
                    //Console.WriteLine(result);

                    Console.WriteLine(firstNumber[firstNumber.Length - 1 - i]+"-"+secondNumber[secondNumber.Length - 1 - i]+"----------"+result);
                }

            }
            Console.ReadLine();
            #endregion